<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bloom's Algorithm Visualization</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Arial', sans-serif;
        }
        
        body {
            background-color: #f0f2f5;
            color: #333;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }

        header {
            background-color: #2a2d34;
            padding: 20px;
            text-align: center;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        header h1 {
            color: white;
            font-size: 2.5rem;
        }

        nav {
            margin-top: 10px;
        }

        nav a {
            color: white;
            text-decoration: none;
            margin: 0 15px;
            font-size: 1.2rem;
            font-weight: 600;
            transition: color 0.3s ease;
        }

        nav a:hover {
            color: #f8b400;
        }

        .container {
            display: flex;
            flex: 1;
        }

        .sidebar {
            width: 200px;
            background-color: white;
            padding: 15px;
            border-right: 1px solid #ccc;
            box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
        }

        .sidebar ul {
            list-style-type: none;
            padding: 0;
        }

        .sidebar li a {
            display: block;
            padding: 10px;
            color: #333;
            font-weight: bold;
            text-decoration: none;
            transition: background-color 0.3s ease;
        }

        .sidebar li a:hover {
            background-color: #f8b400;
            color: white;
            border-radius: 5px;
        }

        .main-content {
            padding: 20px;
            width: 100%;
        }

        .main-content h1 {
            font-size: 2rem;
            color: #333;
            margin-bottom: 20px;
        }

        #controls {
            margin-bottom: 20px;
        }

        #controls button, #controls input {
            padding: 10px;
            font-size: 16px;
            border: 1px solid #ddd;
            border-radius: 5px;
            margin-right: 10px;
        }

        #bitArray span {
            display: inline-block;
            padding: 8px;
            background-color: #6c87f5;
            color: #fff;
            margin: 0 2px;
            border-radius: 5px;
        }

        .btn {
            background-color: #f8b400;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.3s ease;
            text-align: center;
            display: inline-block;
            text-decoration: none;
            font-size: 1rem;
        }

        .btn:hover {
            background-color: #d49a00;
            transform: translateY(-5px);
        }

        footer {
            background-color: #2a2d34;
            padding: 20px;
            text-align: center;
            color: white;
        }

        footer p {
            margin: 5px 0;
        }

        footer a {
            color: #f8b400;
            text-decoration: none;
        }

        footer a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>

    <header>
        <h1>Bloom's Algorithm Visualization</h1>
        <nav>
            <a href="../index.htm">HOME</a>
            <a href="../contributors.htm">CONTRIBUTORS</a>
            <a href="../contacts.htm">CONTACT</a>
        </nav>
    </header>

    <main class="container">
        <div class="sidebar">
            <ul>
                <li> <a href="../index.htm">HOME</a></li>
                <li><a href="../bloom/bloom-pretest.htm">Pretest</a></li>
                <li><a href="../bloom/bloom-video.htm">Bloom's Algorithm</a></li>
                <li><a href="../bloom/bloom-visualization.htm">Visualisation</a></li>
                <li><a href="../bloom/bloom-analysis.htm">Analysis</a></li>
                <li><a href="../bloom/bloom-posttest.htm">Posttest</a></li>
            </ul>
        </div>

        <div class="main-content">
            <h1>Bloom's Algorithm Visualization</h1>
            <div id="controls">
                <input type="number" id="inputSize" placeholder="Enter hash table size">
                <button onclick="initializeHashTable()">Set</button>
                <div id="valueInputDiv" style="display: none;">
                    <input type="number" id="inputValue" placeholder="Enter value to store/search">
                    <button onclick="processValue()">Insert</button>
                    <button onclick="searchValue()">Search</button>
                </div>
                <button id="resetButton" class="btn" style="display: none;" onclick="resetHashTable()">Reset</button>
            </div>
            <div id="visualization">
                <p id="tableStatus">Please enter the size of the hash table to begin.</p>
                <div id="hashCalculations"></div>
                <div id="bitArray"></div>
            </div>
        </div>
    </main>

    <footer>
        <p>&copy; 2024 Learning Labs. All rights reserved.</p>
    </footer>

    <script>
    let bitArray = [];
    let size = 0;

    function initializeHashTable() {
        const inputSize = document.getElementById("inputSize");
        size = parseInt(inputSize.value);
        if (!isNaN(size) && size > 0) {
            bitArray = new Array(size).fill(0);
            // Hide input size element and show the value input div
            document.getElementById("valueInputDiv").style.display = "block"; 
            document.getElementById("resetButton").style.display = "inline"; 
            document.getElementById("tableStatus").textContent = `Hash table initialized with size ${size}. Enter a value to insert or search.`;
            displayBitArray();
        }
    }

    function hash1(value) { return (value % size); }
    function hash2(value) { return (value * 3 % size); }
    function hash3(value) { return (value * 7 % size); }

    function displayBitArray() {
        const bitArrayDiv = document.getElementById("bitArray");
        bitArrayDiv.innerHTML = bitArray.map(bit => `<span>${bit}</span>`).join(" ");
    }

    function processValue() {
        const inputValue = parseInt(document.getElementById("inputValue").value);
        if (!isNaN(inputValue)) {
            insertValue(inputValue);
            document.getElementById("inputValue").value = '';  
        }
    }

    function insertValue(inputValue) {
        const h1 = hash1(inputValue);
        const h2 = hash2(inputValue);
        const h3 = hash3(inputValue);

        bitArray[h1] = 1;
        bitArray[h2] = 1;
        bitArray[h3] = 1;

        displayBitArray();
        document.getElementById("hashCalculations").innerHTML = `
            <p>Inserted value <strong>${inputValue}</strong>:</p>
            <p>Hash 1: Position ${h1}</p>
            <p>Hash 2: Position ${h2}</p>
            <p>Hash 3: Position ${h3}</p>
        `;
    }

    function searchValue() {
        const inputValue = parseInt(document.getElementById("inputValue").value);
        if (!isNaN(inputValue)) {
            const h1 = hash1(inputValue);
            const h2 = hash2(inputValue);
            const h3 = hash3(inputValue);

            const searchResult = (bitArray[h1] === 1 && bitArray[h2] === 1 && bitArray[h3] === 1);

            document.getElementById("hashCalculations").innerHTML = `
                <p>Search calculations for value <strong>${inputValue}</strong>:</p>
                <p>Hash 1: Position ${h1} - <strong>${bitArray[h1] === 1 ? "Match (1)" : "No Match (0)"}</strong></p>
                <p>Hash 2: Position ${h2} - <strong>${bitArray[h2] === 1 ? "Match (1)" : "No Match (0)"}</strong></p>
                <p>Hash 3: Position ${h3} - <strong>${bitArray[h3] === 1 ? "Match (1)" : "No Match (0)"}</strong></p>
                <p><strong>Search Result: ${searchResult ? "Value may be present" : "Value is not present"}</strong></p>
            `;
        }
    }

    function resetHashTable() {
        bitArray.fill(0);
        displayBitArray();
        document.getElementById("tableStatus").textContent = "Hash table reset. Enter a new size to start again.";
        document.getElementById("inputSize").value = '';
        document.getElementById("valueInputDiv").style.display = "none";
        document.getElementById("resetButton").style.display = "none";
    }
</script>

</body>
</html>
