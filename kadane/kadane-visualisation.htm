<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Kadane's Algorithm Visualization</title>
<style>
  /* Basic styling for page layout */
  body {
    font-family: Arial, sans-serif;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #f7f7f7;
  }
  #container {
    text-align: center;
    width: 80%;
  }

  /* Array elements styling */
  .array-element {
    display: inline-block;
    margin: 5px;
    padding: 10px;
    width: 30px;
    background-color: #ddd;
    border-radius: 5px;
    font-weight: bold;
  }

  /* Styling for current and global maximum highlights */
  .highlight {
    background-color: orange;
  }
  .global-highlight {
    background-color: blue;
    color: white;
  }

  /* Info display styling */
  #info {
    margin-top: 20px;
    font-size: 18px;
  }
</style>
</head>
<body>
<div id="container">
  <h2>Kadane's Algorithm Visualization</h2>
  <div id="array"></div>
  <div id="info">Max Subarray Sum So Far: <span id="max-sum">0</span></div>
  <button onclick="startKadane()">Start Visualization</button>
</div>

<script>
  // Initial array and Kadane's Algorithm variables
  const arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4];
  let maxSumGlobal = arr[0];
  let maxSumCurrent = arr[0];
  let currentIndex = 0;

  // Function to create and display array elements
  function createArrayDisplay() {
    const arrayContainer = document.getElementById('array');
    arrayContainer.innerHTML = ''; // Clear existing elements

    arr.forEach((num, index) => {
      const element = document.createElement('div');
      element.classList.add('array-element');
      element.id = `element-${index}`;
      element.textContent = num;
      arrayContainer.appendChild(element);
    });
  }

  // Function to update display with current algorithm state
  function updateDisplay() {
    document.getElementById('max-sum').textContent = maxSumGlobal;

    // Remove highlights from all elements
    arr.forEach((_, index) => {
      const element = document.getElementById(`element-${index}`);
      element.classList.remove('highlight', 'global-highlight');
    });

    // Highlight the current element and global max if updated
    if (currentIndex > 0) {
      document.getElementById(`element-${currentIndex - 1}`).classList.remove('highlight');
    }
    document.getElementById(`element-${currentIndex}`).classList.add('highlight');
    if (maxSumCurrent === maxSumGlobal) {
      document.getElementById(`element-${currentIndex}`).classList.add('global-highlight');
    }
  }

  // Function to handle each step in Kadane's Algorithm
  function kadaneStep() {
    if (currentIndex >= arr.length) {
      return;
    }

    maxSumCurrent = Math.max(arr[currentIndex], maxSumCurrent + arr[currentIndex]);
    maxSumGlobal = Math.max(maxSumGlobal, maxSumCurrent);
    updateDisplay();

    currentIndex++;
    if (currentIndex < arr.length) {
      setTimeout(kadaneStep, 1000); // Adjust speed by changing delay time
    }
  }

  // Function to start Kadane's Algorithm visualization
  function startKadane() {
    currentIndex = 0;
    maxSumGlobal = arr[0];
    maxSumCurrent = arr[0];
    updateDisplay();
    kadaneStep();
  }

  // Initialize array display on load
  createArrayDisplay();
</script>
</body>
</html>
