<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Interactive Linked List Visualization</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: linear-gradient(135deg, #f0f4f8, #d9e7ff);
      color: #333;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 20px;
      margin: 0;
    }
    h2 {
      font-size: 2em;
      color: #333;
      margin-top: 20px;
    }
    .node {
      display: inline-block;
      padding: 15px 25px;
      margin: 15px 10px;
      background: linear-gradient(135deg, #4CAF50, #66BB6A);
      color: white;
      font-weight: bold;
      border-radius: 10px;
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    .node:hover {
      transform: scale(1.1);
      box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
    }
    .arrow {
      display: inline-block;
      margin: 0 10px;
      font-size: 24px;
      color: #555;
    }
    #controls {
      margin: 20px auto;
      padding: 25px;
      background: white;
      border-radius: 12px;
      width: 90%;
      max-width: 600px;
      box-shadow: 0 6px 16px rgba(0, 0, 0, 0.1);
    }
    #controls input[type="number"] {
      padding: 12px;
      width: calc(40% - 20px);
      margin: 8px 10px;
      border: 1px solid #ddd;
      border-radius: 8px;
      font-size: 16px;
      transition: border-color 0.2s ease;
    }
    #controls input[type="number"]:focus {
      border-color: #4CAF50;
      outline: none;
    }
    #controls button {
      padding: 12px 25px;
      margin: 8px 10px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 8px;
      font-size: 16px;
      cursor: pointer;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      transition: background-color 0.3s ease, transform 0.2s ease;
    }
    #controls button:hover {
      background-color: #45a049;
      transform: translateY(-2px);
      box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);
    }
    #linkedList {
      margin-top: 30px;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-wrap: wrap;
      max-width: 90%;
    }
  </style>
</head>
<body>

<h2>Interactive Linked List Visualization</h2>
<div id="controls">
  <input type="number" id="nodeValue" placeholder="Enter node value" />
  <button onclick="addNodeAtEnd()">Add Node at End</button>
  <button onclick="addNodeAtFront()">Add Node at Front</button>
  <br><br>
  <input type="number" id="nodePosition" placeholder="Enter position" />
  <button onclick="addNodeAtPosition()">Add Node at Position</button>
</div>
<div id="linkedList"></div>

<script>
  class Node {
    constructor(value) {
      this.value = value;
      this.next = null;
    }
  }

  class LinkedList {
    constructor() {
      this.head = null;
    }

    append(value) {
      const newNode = new Node(value);
      if (!this.head) {
        this.head = newNode;
      } else {
        let current = this.head;
        while (current.next) {
          current = current.next;
        }
        current.next = newNode;
      }
      this.render();
    }

    prepend(value) {
      const newNode = new Node(value);
      newNode.next = this.head;
      this.head = newNode;
      this.render();
    }

    insertAtPosition(value, position) {
      const newNode = new Node(value);
      if (position <= 1 || !this.head) {
        this.prepend(value);
        return;
      }
      let current = this.head;
      let count = 1;
      while (current && count < position - 1) {
        current = current.next;
        count++;
      }
      if (current) {
        newNode.next = current.next;
        current.next = newNode;
      } else {
        alert("Position out of bounds. Adding at the end.");
        this.append(value);
      }
      this.render();
    }

    render() {
      const container = document.getElementById("linkedList");
      container.innerHTML = "";
      let current = this.head;
      while (current) {
        const nodeElem = document.createElement("div");
        nodeElem.className = "node";
        nodeElem.innerText = current.value;
        container.appendChild(nodeElem);

        if (current.next) {
          const arrowElem = document.createElement("span");
          arrowElem.className = "arrow";
          arrowElem.innerHTML = "&#8594;";
         
