<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MY LEARNING Labs - Posttest</title>
    <link rel="stylesheet" href="css_m.css">
    <style>
        /* Basic resets */
        body, h1, h2, p, ul, li {
            margin: 0;
            padding: 0;
            list-style: none;
        }

        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            background-color: #f4f4f4;
            color: #333;
        }

        header {
            background: #4CAF50;
            color: #fff;
            padding: 10px 0;
        }

        header .container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1200px;
            margin: auto;
            padding: 0 20px;
        }

        nav ul {
            display: flex;
        }

        nav ul li {
            margin-left: 20px;
        }

        nav ul li a {
            color: white;
            text-decoration: none;
            padding: 8px 16px;
            transition: background-color 0.3s;
        }

        nav ul li a:hover {
            background-color: rgba(255, 255, 255, 0.2);
            border-radius: 4px;
        }

        main {
            max-width: 800px;
            margin: 20px auto;
            padding: 20px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        h1, h2 {
            margin-bottom: 10px;
        }

        .content {
            display: flex;
            flex-direction: column;
        }

        .sidebar {
            margin-bottom: 20px;
        }

        .sidebar ul {
            padding: 10px;
            background: #eaeaea;
            border-radius: 5px;
            margin-bottom: 20px;
        }

        .sidebar ul li {
            margin-bottom: 10px;
        }

        .sidebar ul li a {
            color: #333;
            text-decoration: none;
        }

        .sidebar ul li a:hover {
            text-decoration: underline;
        }

        /* Styling the buttons */
        button {
            background-color: #4CAF50; /* Green background */
            border: none; /* No border */
            color: white; /* White text */
            padding: 15px 32px; /* Padding */
            text-align: center; /* Centered text */
            text-decoration: none; /* No underline */
            display: inline-block; /* Inline-block for width/height control */
            font-size: 16px; /* Font size */
            margin: 20px auto; /* Margin */
            cursor: pointer; /* Pointer cursor on hover */
            border-radius: 8px; /* Rounded corners */
            transition: background-color 0.3s ease; /* Smooth transition for hover */
            width: 100%; /* Full width */
        }

        /* Hover effect for the buttons */
        button:hover {
            background-color: #45a049; /* Darker green on hover */
        }

        /* Styling the result text */
        #result {
            font-size: 18px;
            font-weight: bold;
            color: #333;
            margin-top: 20px;
            text-align: center; /* Center the result text */
        }

        footer {
            background: #333;
            color: white;
            text-align: center;
            padding: 10px 0;
            position: relative;
            bottom: 0;
            width: 100%;
        }

        /* Answer highlight styling */
        .correct {
            background-color: #c8e6c9; /* light green */
        }

        .incorrect {
            background-color: #ffcccb; /* light red */
        }
    </style>
</head>

<body>
    <header>
        <div class="container">
            <div class="logo">
                <img src="../logo.png" alt="MY LEARNING Labs Logo" style="height: 50px;">
            </div>
            <nav>
                <ul>
                    <li><a href="../index.htm">HOME</a></li>
                    <li><a href="../contributors.htm">CONTRIBUTORS</a></li>
                    <li><a href="../contacts.htm">CONTACT</a></li>
                </ul>
            </nav>
        </div>
    </header>

    <main>
        <div class="container">
            <h1>Posttest</h1>
            <h2>Dijkstra Algorithm Posttest</h2>
            <div class="content">
                <form id="posttest-form">
                    <ol id="questions-list"></ol>
                    <button type="button" onclick="calculateScore()">Submit</button>
                    <div id="result"></div>
                </form>

                <!-- Back to Home button -->
                <div class="content-item">
                    <button class="btn" onclick="window.location.href='../home/home-dijkstra.htm'"> Back to Home </button>
                </div>
            </div>
        </div>
    </main>

    <footer>
        <p>Copyright &copy; 2023 MY LEARNING Labs</p>
    </footer>

    <script>
       const questions = [
    
    {
        question: "In Dijkstra's Algorithm, what value is typically assigned to the starting node's distance at initialization?",
        options: [
            { text: "0", id: "q3a", correct: true },
            { text: "Infinity", id: "q3b" },
            { text: "1", id: "q3c" },
            { text: "Negative Infinity", id: "q3d" }
        ]
    },
    {
        question: "How does Dijkstra's Algorithm handle nodes once the shortest path to them is determined?",
        options: [
            { text: "Marks them as 'visited'", id: "q4a", correct: true },
            { text: "Deletes them from the graph", id: "q4b" },
            { text: "Sets their distance to zero", id: "q4c" },
            { text: "Marks them as 'unvisited'", id: "q4d" }
        ]
    },
    {
        question: "What type of edge weights does Dijkstra's Algorithm require?",
        options: [
            { text: "Only negative weights", id: "q5a" },
            { text: "Non-negative weights", id: "q5b", correct: true },
            { text: "Positive weights only", id: "q5c" },
            { text: "No restrictions on weights", id: "q5d" }
        ]
    },
    {
        question: "What will happen if Dijkstra's Algorithm is applied to a graph with negative weights?",
        options: [
            { text: "It may provide incorrect results", id: "q6a", correct: true },
            { text: "It will find the shortest path correctly", id: "q6b" },
            { text: "It will ignore negative weights", id: "q6c" },
            { text: "It will mark all paths as infinite", id: "q6d" }
        ]
    },
    {
        question: "What is the complexity of Dijkstra's Algorithm when using a priority queue?",
        options: [
            { text: "O(V)", id: "q7a" },
            { text: "O(E + V log V)", id: "q7b", correct: true },
            { text: "O(E log V)", id: "q7c" },
            { text: "O(V^2)", id: "q7d" }
        ]
    },
    {
        question: "Which of the following is NOT a valid use case for Dijkstra's Algorithm?",
        options: [
            { text: "Finding the shortest path in a map application", id: "q8a" },
            { text: "Determining minimum spanning tree", id: "q8b", correct: true },
            { text: "Routing data in a network", id: "q8c" },
            { text: "Finding the shortest distance between locations", id: "q8d" }
        ]
    },
    {
        question: "In Dijkstra's Algorithm, which operation is performed to select the next node to process?",
        options: [
            { text: "Extracting the minimum distance node", id: "q9a", correct: true },
            { text: "Extracting the maximum distance node", id: "q9b" },
            { text: "Adding a new node to the queue", id: "q9c" },
            { text: "Removing all nodes from the queue", id: "q9d" }
        ]
    },
    {
        question: "What is the effect of marking a node as 'visited' in Dijkstra's Algorithm?",
        options: [
            { text: "The shortest path to that node has been determined", id: "q10a", correct: true },
            { text: "All edges connected to that node are removed", id: "q10b" },
            { text: "The node cannot be revisited", id: "q10c" },
            { text: "The node's distance is set to zero", id: "q10d" }
        ]
    }
];

        function shuffle(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
        }

        function renderQuestions() {
            shuffle(questions);
            const questionsList = document.getElementById('questions-list');
            questionsList.innerHTML = '';

            questions.forEach((q, index) => {
                const questionItem = document.createElement('li');
                questionItem.innerHTML = `<p>${index + 1}. ${q.question}</p>`;

                const optionsList = document.createElement('ul');
                shuffle(q.options);

                q.options.forEach(opt => {
                    const optionItem = document.createElement('li');
                    optionItem.innerHTML = `
                        <input type="radio" id="${opt.id}" name="q${index + 1}">
                        <label for="${opt.id}" data-correct="${opt.correct || false}">${opt.text}</label>
                    `;
                    optionsList.appendChild(optionItem);
                });

                questionItem.appendChild(optionsList);
                questionsList.appendChild(questionItem);
            });
        }

        function calculateScore() {
            let score = 0;
            questions.forEach((q, index) => {
                const selectedOption = document.querySelector(`input[name="q${index + 1}"]:checked`);
                if (selectedOption) {
                    const label = selectedOption.nextElementSibling;
                    if (label.getAttribute("data-correct") === "true") {
                        label.classList.add("correct");
                        score++;
                    } else {
                        label.classList.add("incorrect");
                    }
                }
            });

            document.getElementById("result").textContent = "Your score: " + score + " out of " + questions.length;
        }

        document.addEventListener("DOMContentLoaded", renderQuestions);
    </script>
</body>
</html>
