<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Dijkstra Algorithm - Algorithm Learning Platform</title>
    <style>
        /* Add your existing CSS styles here */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Arial', sans-serif;
        }

        body {
            background-color: #f0f2f5;
            font-family: 'Arial', sans-serif;
        }

        header {
            background-color: #2a2d34;
            padding: 20px;
            text-align: center;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        header h1 {
            color: white;
            font-size: 2.5rem;
        }

        nav {
            margin-top: 10px;
        }

        nav a {
            color: white;
            text-decoration: none;
            margin: 0 15px;
            font-size: 1.2rem;
            font-weight: 600;
            transition: color 0.3s ease;
        }

        nav a:hover {
            color: #f8b400;
        }

        .content {
            padding: 50px;
            background-color: #f0f2f5;
        }

        .content-item {
            background-color: white;
            border-radius: 15px;
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
            padding: 20px;
            margin: 20px 0;
        }

        .content-item h3 {
            font-size: 2rem;
            color: #333;
            margin-bottom: 15px;
        }

        .content-item p {
            color: #666;
            margin-bottom: 15px;
            line-height: 1.6;
        }

        .btn {
            background-color: #f8b400;
            color: white;
            font-size: 1rem;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.3s ease;
            text-align: center;
            display: inline-block;
            text-decoration: none;
        }

        .btn:hover {
            background-color: #d49a00;
            transform: translateY(-5px);
        }

        footer {
            background-color: #2a2d34;
            padding: 20px;
            text-align: center;
            color: white;
        }

        footer p {
            margin-bottom: 5px;
        }

        footer a {
            color: #f8b400;
            text-decoration: none;
        }

        footer a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>

    <!-- Header Section -->
    <header>
        <h1>Dijkstra's Algorithm</h1>
        <nav>
            <a href="../index.htm">Home</a>
            <a href="#courses">Courses</a>
            <a href="../about.htm">About Us</a>
            <a href="../contacts.htm">Contact</a>
        </nav>
    </header>

    <!-- Content Section -->
    <section class="content">
        <div class="content-item">
            <h3>What is Djikstra's Algorithm?</h3>
            <p>Dijkstra's algorithm is used to find the shortest path between nodes in a graph, which may represent, for example, road networks. It was conceived by computer scientist Edsger W. Dijkstra in 1956 and published three years later.</p>
        </div>

        <div class="content-item">
    <h3>How Does it Work?</h3>
    <p>Dijkstra's algorithm works by maintaining a list of distances from the starting node to all other nodes. Initially, all distances are set to infinity, except for the starting node which is set to zero. The algorithm then repeatedly selects the node with the smallest known distance, calculates the distance to each of its neighbors, and updates their distances if a shorter path is found. This process continues until the shortest paths to all nodes are known.</p>

    <h4>Pseudocode</h4>
    <pre>
    function Dijkstra(Graph, source):
        // Initialize distances
        for each node in Graph:
            distance[node] = infinity
            previous[node] = undefined
        distance[source] = 0

        // Create priority queue and add source
        Q = set of all nodes in Graph with their distances
        while Q is not empty:
            // Select node with smallest distance
            u = node in Q with smallest distance
            remove u from Q

            // Check each neighbor v of u
            for each neighbor v of u:
                alt = distance[u] + length(u, v)
                if alt < distance[v]: // Found a shorter path
                    distance[v] = alt
                    previous[v] = u

        return distance, previous
    </pre>

    <h4>Algorithm Explanation</h4>
    <ul>
        <li>Initialize distances: Set the initial distance for the source node to 0 and all other nodes to infinity.</li>
        <li>Use a priority queue to store nodes and their current shortest distance from the source node.</li>
        <li>While the queue is not empty:
            <ul>
                <li>Select the node with the smallest distance (let’s call it <em>u</em>).</li>
                <li>For each neighbor of <em>u</em>:
                    <ul>
                        <li>Calculate the potential new distance by adding the distance to <em>u</em> and the distance from <em>u</em> to the neighbor.</li>
                        <li>If this new distance is shorter, update the shortest distance for that neighbor.</li>
                    </ul>
                </li>
                <li>Remove <em>u</em> from the queue.</li>
            </ul>
        </li>
        <li>After all nodes have been processed, the algorithm returns the shortest distances from the source to each node.</li>
    </ul>

    <p>This process guarantees the shortest path in weighted graphs without negative edges, as Dijkstra's algorithm cannot handle graphs with negative edge weights.</p>
</div>
        <div class="content-item">
    <h3>Time and Space Complexity</h3>
    <p>Dijkstra's algorithm's efficiency depends on the graph's structure and the data structures used to implement it. Let’s break down the time and space complexity based on different scenarios:</p>

    <h4>Time Complexity</h4>
    <ul>
        <li><strong>Using an adjacency list and a binary min-heap (Priority Queue):</strong>
            <ul>
                <li>Finding the node with the minimum distance requires \(O(\log V)\) time, where \(V\) is the number of vertices. This operation is repeated for each vertex, resulting in \(O(V \log V)\).</li>
                <li>Updating the distances of the neighbors involves an operation on each edge, so edge relaxations take \(O(E \log V)\), where \(E\) is the number of edges.</li>
                <li>Overall time complexity with a binary heap is \(O((V + E) \log V)\).</li>
            </ul>
        </li>
        <li><strong>Using an adjacency list and a Fibonacci heap:</strong>
            <ul>
                <li>Using a Fibonacci heap improves the time for finding the minimum node to \(O(1)\) and decreases the complexity of updating distances to \(O(\log V)\).</li>
                <li>This makes the total time complexity \(O(V \log V + E)\), which is faster for dense graphs.</li>
            </ul>
        </li>
        <li><strong>Summary of time complexity:</strong>
            <ul>
                <li><strong>Binary Heap:</strong> \(O((V + E) \log V)\)</li>
                <li><strong>Fibonacci Heap:</strong> \(O(V \log V + E)\)</li>
            </ul>
        </li>
    </ul>

    <h4>Space Complexity</h4>
    <p>The space complexity of Dijkstra's algorithm mainly depends on the storage requirements for:</p>
    <ul>
        <li><strong>Graph Representation:</strong> If we use an adjacency list, the graph storage takes \(O(V + E)\) space.</li>
        <li><strong>Distance Array:</strong> Storing the minimum distances for each vertex requires \(O(V)\) space.</li>
        <li><strong>Priority Queue:</strong> Using a binary heap or Fibonacci heap requires additional space for the priority queue, which is \(O(V)\) in the worst case.</li>
    </ul>

    <p><strong>Overall space complexity:</strong> \(O(V + E)\) for graphs using adjacency lists, as we only store distances and queue entries in addition to the graph representation.</p>
</div>


        <div class="content-item">
            <h3>Advantages</h3>
            <ul>
                <li>Efficient for finding the shortest path in a graph.</li>
                <li>Works well for both directed and undirected graphs.</li>
            </ul>
        </div>

        <div class="content-item">
            <h3>Disadvantages</h3>
            <ul>
                <li>Cannot handle negative weights in the graph.</li>
                <li>Not the most efficient for very large graphs with many nodes.</li>
            </ul>
        </div>

        <div class="content-item">
            <h3>Use Cases</h3>
            <p>Djikstra's algorithm is widely used in various applications, such as:</p>
            <ul>
                <li>Routing and navigation systems (e.g., Google Maps, GPS).</li>
                <li>Network routing algorithms.</li>
                <li>Optimization problems involving shortest paths.</li>
            </ul>
        </div>

        <div class="content-item">
            <h3>Conclusion</h3>
            <p>Djikstra's algorithm provides a fundamental solution to the shortest path problem and is widely used in many real-world applications. Understanding its working principle helps in applying it effectively to solve optimization problems.</p>
        </div>

        <div class="content-item">
            <button class="btn" onclick="window.location.href='../home/home-dijkstra.htm'"> Back to Home </button>
        </div>
    </section>

    <!-- Footer -->
    <footer>
        <p>&copy; 2024 Algorithm Learning Platform. All rights reserved.</p>
        <p><a href="#">Privacy Policy</a> | <a href="#">Terms of Service</a></p>
    </footer>

</body>
</html>
